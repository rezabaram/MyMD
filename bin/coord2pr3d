#!/usr/bin/perl


sub print_mat{
	my($product)=@_;
	for (my $i=0;$i < 3;$i++) {
		for (my $j=0;$j < 3;$j++) {
		    print $product->[$i][$j]," ";
		}
	    print " 0\n";
	}
	}
sub matrix_multiply {
    my ($r_mat1,$r_mat2)=@_;
    my ($r_product);
    my ($r1,$c1)=matrix_count_rows_cols($r_mat1);
    my ($r2,$c2)=matrix_count_rows_cols($r_mat2);

#    print $c1,$c2,"\n";
#    print $r1,$r2,"\n";
    
    die "matrix 1 has $c1 columns and matrix 2 has $r2 rows>" 
        . " Cannot multiply\n" unless ($c1==$r2);
    for (my $i=0;$i<$r1;$i++) {
        for (my $j=0;$j<$c2;$j++) {
            my $sum=0;
            for (my $k=0;$k<$c1;$k++) {
                $sum+=$r_mat1->[$i][$k]*$r_mat2->[$k][$j];
            }
            $r_product->[$i][$j]=$sum;
        }
    }
    $r_product;
}

sub matrix_count_rows_cols { 
    my ($r_mat)=@_;
    my $num_rows=@$r_mat;
    my $num_cols=@{$r_mat->[0]};
    ($num_rows,$num_cols);
}

$xoffset=0;
$yoffset=0;
$scale=1;
$linewidth=0.005;
$auto_xoffset=0;
$auto_yoffset=0;
$auto_xsize=0;
$auto_ysize=0;
$autoscale=10;
$drawline=0;
$nparticle=0;
$x_rotate=90;
$y_rotate=0;
$z_rotate=0;

srand(0);
for($i = 1; $i < 100000; $i++) {
	$rcolor[$i]=rand();
	$gcolor[$i]=rand();
	$bcolor[$i]=rand();
	}
foreach (@ARGV) {
 chomp;
 if (/-x(.*)/) {
  $xoffset=$1;
 }
 if (/-y(.*)/) {
  $yoffset=$1;
 }
 if (/-s(.*)/) {
  $scale=$1;
 }
 if (/-a/) {
  $autoscale=1;
 }
 if (/-d/) {
  $drawline=1;
 }
 if (/-l(.*)/) {
  $linewidth=$1;
 }
 if (/-rx(.*)/) {
  $x_rotate=$1;
 }

 if (/-ry(.*)/) {
  $y_rotate=$1;
 }

 if (/-rz(.*)/) {
  $z_rotate=$1;
 }
 if (/^-h/ or /^--h/ or /^-\?/) {
  print "Usage: xbps [-x0] [-y0] [-s1] [-l0.01] FILE\n";
  print "\t-x\toffset in x\n";
  print "\t-y\toffset in y\n";
  print "\t-s\tscale factor\n";
  print "\t-a\ttry to autoscale\n";
  print "\t-l\tline width\n";
  exit;
 }
}
foreach (@ARGV) {
 chomp;
 if (/^[^-]/){
  $filename=$_;
 open(INPUT,$filename) or die "Can't open $FOO: $!";
  #$particle_counter=1;

#  if($autoscale){
#   $scale=29.7/$auto_ysize; # 297mm
#   $tmp=21.0 / $auto_xsize; # 210mm
#   if($tmp<$scale) {$scale=$tmp};
#  }
$pi=3.14159265;
$alpha=$x_rotate*$pi/180.0;
@xmatrix=(
    [1, 0, 0],
    [0,cos($alpha), -sin($alpha)],
    [0,sin($alpha),  cos($alpha)]
	);
$alpha=$y_rotate*$pi/180.0;
@ymatrix=(
    [cos($alpha), 0, sin($alpha)],
    [0, 1, 0],
    [-sin($alpha), 0, cos($alpha)]
	);
$alpha=$z_rotate*$pi/180.0;
@zmatrix=(
    [cos($alpha), -sin($alpha), 0],
    [sin($alpha),  cos($alpha), 0],
    [0, 0, 1]
	);
@rot_mat=@{matrix_multiply(\@xmatrix, matrix_multiply(\@ymatrix, \@zmatrix))};

print "Raster3D V2.7s
100  100    tiles in x,y
 8   8    pixels (x,y) per tile
4         anti-aliasing 3x3 -> 2x2 pixels
0.9 0.9 0.8     black background
T         yes, I LIKE shadows!
4        Phong power
0.15      secondary light contribution
0.05      ambient light contribution
0.25      specular reflection component
111.5       eye position
1 1 1     main light source position
\n";
print_mat(\@rot_mat);
print "-.5 -.5 0.5 1.1 
3         mixed object types
*
*
*\n";
#print "Raster3D V2.7s
#100  100    tiles in x,y
# 8   8    pixels (x,y) per tile
#4         anti-aliasing 3x3 -> 2x2 pixels
#0.9 0.9 0.8     black background
#T         yes, I LIKE shadows!
#4        Phong power
#0.15      secondary light contribution
#0.05      ambient light contribution
#0.25      specular reflection component
#111.5       eye position
#1 1 1     main light source position
#1 0 0 0   input co-ordinate + radius transformation
#0 0 -1 0
#0 1 0 0
#-.5 -.5 0.5 1.1 
#3         mixed object types
#*
#*
#r*\n";

#open(INPUT,$filename) or die "Can't open $FOO: $!";
  #$particle_counter=0;
  while(<INPUT>){
    /^\s*(\S*)\s*(\S*)\s*(\S*)\s*(\S*)\s*(\S*)\s*(\S*)\s*(\S*)\s*(\S*)\s*(\S*)\s*(\S*)\s*(\S*)\s*(\S*)\s*(\S*)\s*(\S*)\s*(\S*)\s*(\S*)/;
    #labels are chosen according to render fuction of raster3d 
	$nparticle++;
    if($1==14){
	$r=$rcolor[$nparticle]; $g=$gcolor[$nparticle]; $b=$bcolor[$nparticle];
	printf("%d\n %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f\n", $1, $2, $3, $4, $5, $r, $g, $b,$6,$7,$8,$9,$10,$11,$12, $13, $14, $15 );
		}
    elsif($1==6){
	$r=0.7; $g=0.7; $b=0.7;
	printf("%d\n %f %f %f %f %f %f %f %f %f %f %f %f\n", $1, $2, $3, $4, $5, $6,$7,$8,$9, $10, $r, $g, $b);
	}
    elsif($1==5 or $1==3){#cylinder, flat- and round-ended
        #$r=2.30/2.55; $g=2.00/2.55; $b=2.30/2.55;
        $r=0.7; $g=0.5; $b=0.7;
        #$r=$rcolor[$nparticle]; $g=$gcolor[$nparticle]; $b=$bcolor[$nparticle];
        printf("%d\n %f %f %f %f %f %f %f %f %f %f %f \n", $1, $2, $3, $4, $5, $6,$7,$8, $9, $r, $g, $b);
        }
    elsif($1==8){#cylinder - flat end
	printf("%d\n %f %f %f %f %f %f %f %f %f %f\n", $1, $2, $3, $4, $5, $6,$7,$8, $9, $10, $11);
	}
    elsif($1==9){#cylinder - flat end
	printf("%d\n %f %f %f %f %f %f %f %f \n", $1, $2, $3, $4, $5, $6,$7,$8);
	}
    else{
	$identifier=$1;
	$x=$xoffset+$scale*$2;
	$y=$yoffset+$scale*$3;
	$z=$yoffset+$scale*$4;
	$radius=$scale*$5;
	$r=$6;
	$g=$7;
	$b=$8;

	$r=0; $g=0; $b=0;
	if($identifier ==1){ $r=1};
	if($identifier ==2){ $g=1};
	if($identifier ==3){ $b=1};
	$r=$rcolor[$nparticle]; $g=$gcolor[$nparticle]; $b=$bcolor[$nparticle];
	printf("2\n %f %f %f %f %f %f %f\n", $x, $y, $z, $radius, $r, $g, $b);
	}
    }
  exit;
 }
}
